/*Question 1:
Write a program that takes as input an array of numbers â€“ positive and negative. The objective is to
return the array arranged in an alternate order such that every positive number is followed by a
negative number throughout.
Example: For an input array [-3, 1, 2, 4, -6, 8, -8, -1],
the result can be [1, -3, 2, -6, 4, -8, 8, -1] */


public class AlternateNumber{
public static void main(String[] args) {
        int[] inputArray = {-3, 1, 2, 4, -6, 8, -8, -1};
        int[] resultArray = arrangeInAlternateOrder(inputArray);
        System.out.println("Input array: ");
        printArray(inputArray);
        System.out.println("Result array: ");
        printArray(resultArray);
    }

    public static int[] arrangeInAlternateOrder(int[] array) {
        int[] result = new int[array.length];
        int positiveIndex = 0, negativeIndex = 1;

        for (int i = 0; i < array.length; i++) {
            if (array[i] > 0) {
                result[positiveIndex] = array[i];
                positiveIndex += 2;
            }
        }

        for (int i = 0; i < array.length; i++) {
            if (array[i] < 0) {
                result[negativeIndex] = array[i];
                negativeIndex += 2;
            }
        }

        return result;
    }

    public static void printArray(int[] array) {
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }
}


/*OUTPUT:-
Input array: 
-3 1 2 4 -6 8 -8 -1 
Result array: 
1 -3 2 -6 4 -8 8 -1 
*/

/* This solution has a time complexity of O(n) where n is the length of the input array. This is because we iterate over the array once to separate the positive and negative numbers, and then we iterate over the positive and negative number lists to create the result array.

The space complexity is also O(n) because in the worst case scenario, we might need to store all the numbers in the input array in the positiveNumbers and negativeNumbers lists.
*/